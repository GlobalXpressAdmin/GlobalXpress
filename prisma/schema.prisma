generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model usuarios_global {
  id               String               @id @default(uuid()) @db.Uuid
  creado_en        DateTime?            @default(now()) @db.Timestamptz(6)
  actualizado_en   DateTime?            @default(now()) @db.Timestamptz(6)
  nombre           String?
  email            String               @unique
  password         String?
  image            String?              // URL o base64 de la imagen de perfil
  indicativo       String?              // Nuevo: indicativo internacional, ej: +57
  telefono         String?              // Nuevo: solo el número, sin indicativo
  genero           String?
  fecha_nacimiento DateTime?            @db.Date
  nacionalidad     String?
  rol              RolUsuario           @default(USUARIO) // Nuevo campo para roles
  passwordResets   PasswordReset[]
  postulaciones    PostulacionTrabajo[]
  comunicaciones   Comunicacion[]
  notificaciones   Notificacion[]
  // El campo telefono anterior se ha separado en indicativo y telefono
}

model PasswordReset {
  id        String          @id @default(uuid()) @db.Uuid
  userId    String          @db.Uuid
  token     String          @unique
  expiresAt DateTime
  createdAt DateTime        @default(now())
  user      usuarios_global @relation(fields: [userId], references: [id])
}

model FormularioPrograma {
  id         Int          @id @default(autoincrement())
  nombre     String
  apellido   String
  email      String
  telefono   String
  visa       EstadoVisa
  mensaje    String?
  terminos   Boolean
  programa   ProgramaTipo
  fechaEnvio DateTime     @default(now())
  estado     EstadoFormularioPrograma @default(RECIBIDO)
}

enum EstadoFormularioPrograma {
  RECIBIDO
  EN_REVISION
  EN_PROCESO
  APROBADO
  RECHAZADO
  FALTAN_DOCUMENTOS
  CONTACTADO
  COMPLETADO
}

model PostulacionTrabajo {
  id                  String            @id @default(uuid()) @db.Uuid
  creado_en           DateTime          @default(now()) @db.Timestamptz(6)
  actualizado_en      DateTime          @default(now()) @db.Timestamptz(6)

  // Datos personales (Step 1)
  nombre              String
  apellido            String
  email               String
  telefono            String
  pais                String
  ciudad              String
  direccion           String
  visa                String // "SI" o "NO"

  // Datos de la vacante
  empresa             String
  cargo               String
  salario             String?
  descripcion         String?
  emailVacante        String?
  workers             String?
  link                String?

  // Experiencia y antecedentes (Steps 2-3)
  conoceEEUU          String // "SI" o "NO"
  trabajoSinAutorizacion String // "SI" o "NO"
  antecedentesMigratorios String // "SI" o "NO"
  arrestado           String // "SI" o "NO"
  saldoMinimo         String // "SI" o "NO"
  quiereFinanciamiento String // "SI" o "NO"

  // Consentimientos (Step 5)
  confirmaRecursos    String // "SI" o "NO"
  aceptaTerminos      String // "SI" o "NO"
  aceptaComunicaciones String // "SI" o "NO"
  aceptaDatos         String // "SI" o "NO"

  // Estado de la postulación
  estado_postulacion  EstadoPostulacion @default(PENDIENTE)
  programa            ProgramaEmpleo
  notas_admin         String?

  // Relación con usuario (opcional)
  usuario_id          String?           @db.Uuid
  usuario             usuarios_global?  @relation(fields: [usuario_id], references: [id])
  
  // Relación con vacante (opcional)
  vacante_id          String?           @db.Uuid
  vacante             Vacante?          @relation(fields: [vacante_id], references: [id])
}

model Comunicacion {
  id             String                @id @default(uuid()) @db.Uuid
  creado_en      DateTime              @default(now()) @db.Timestamptz(6)
  actualizado_en DateTime              @updatedAt @db.Timestamptz(6)
  usuario_id     String                @db.Uuid
  usuario        usuarios_global       @relation(fields: [usuario_id], references: [id])
  asunto         String
  mensaje        String
  estado         EstadoComunicacion    @default(PENDIENTE)
  respuestas     RespuestaComunicacion[]
}

model RespuestaComunicacion {
  id              String        @id @default(uuid()) @db.Uuid
  creado_en       DateTime      @default(now()) @db.Timestamptz(6)
  comunicacion_id String        @db.Uuid
  comunicacion    Comunicacion  @relation(fields: [comunicacion_id], references: [id])
  autor           RolAutor
  mensaje         String
}

model Notificacion {
  id          String   @id @default(uuid())
  usuario_id  String   @db.Uuid
  usuario     usuarios_global @relation(fields: [usuario_id], references: [id])
  titulo      String
  mensaje     String
  leida       Boolean  @default(false)
  tipo        NotificacionTipo
  creada_en   DateTime @default(now())
  referencia  String?  // ID de la postulación, formulario, comunicación, etc.
}

model Vacante {
  id          String   @id @default(uuid()) @db.Uuid
  creado_en   DateTime @default(now()) @db.Timestamptz(6)
  actualizado_en DateTime @default(now()) @db.Timestamptz(6)
  
  empresa     String
  cargo       String
  salario     String?
  descripcion String?
  email       String?
  workers     String?
  link        String?
  activa      Boolean  @default(true)
  
  // Relación con postulaciones
  postulaciones PostulacionTrabajo[]
}

enum EstadoVisa {
  SI
  NO
}

enum ProgramaTipo {
  EB5
  E2
  SKY_MASTERS
  EB2_NIW
  GLOBAL_ACADEMIC
  DUAL_PLACEMENT
}

enum EstadoPostulacion {
  PENDIENTE
  EN_REVISION
  APROBADA
  RECHAZADA
  EN_PROCESO
}

enum ProgramaEmpleo {
  EB3
  DUAL_PLACEMENT
  SKY_MASTERS
  GLOBAL_ACADEMIC
}

enum EstadoComunicacion {
  PENDIENTE
  RESPONDIDO
  CERRADO
}

enum RolAutor {
  USUARIO
  ADMIN
}

enum NotificacionTipo {
  POSTULACION_ESTADO
  FORMULARIO_PROGRAMA_ESTADO
  RESPUESTA_SOPORTE
  RECORDATORIO_PERFIL
  RECORDATORIO_DOCUMENTO
  ADMINISTRATIVA
  PAGO
}

enum RolUsuario {
  USUARIO
  ADMIN
  SUPER_ADMIN
}
